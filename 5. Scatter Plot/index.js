const svg = d3.select('svg');

svg.style('background-color', 'pink');

const height = parseFloat(svg.attr('height'));
const width = +svg.attr('width');

const render = data => {
  const xValue = d => d.population;
  const yValue = d => d.country;
  const margin = {top: 50, right: 40, bottom: 70, left: 180}
  const innerWidth = width - margin.left - margin.right;
  const innerHeight = height - margin.top - margin.bottom;

  // 3. MAKING THE TICK END AT A GOOD SPOT
  // This can be done by using the nice() method in scale
  const xScale = d3.scaleLinear()
    .domain([0, d3.max(data, d => d.population)])
    .range([0, innerWidth])
    .nice();


  // 1.1 CREATING THE CIRCLES FOR THE SCATTERPLOT - d3.scalePoint()
  // Instead of constructing a d3.bandScale() meant for bar charts, use d3.scalePoint() for circles
  const yScale = d3.scalePoint()
    .domain(data.map(d => d.country))
    .range([0,innerHeight])
    .padding(0.5);

  const g = svg.append('g')
    .attr('transform', `translate(${margin.left}, ${margin.top})`)


  // 2. MODIFYING THE TICKSIZE
  // tickSize should be manipulated in the axis as when it is before or when it is called. Not after it is called by g element via call()
  const yAxis = d3.axisLeft(yScale)
    .tickSize(-innerWidth);
  g.append('g')
    .call(yAxis)
    .selectAll('.domain')
      .remove();

  const xAxisTickFormat = number =>
    d3.format('.3s')(number)
      .replace('G', 'B');

  const xAxis = d3.axisBottom(xScale)
    .tickFormat(xAxisTickFormat)
    .tickSize(-innerHeight);

  const xAxisGroup = g.append('g').call(xAxis)
    .attr('transform', `translate(0, ${innerHeight})`);
  xAxisGroup.select('.domain').remove();

  xAxisGroup.append('text')
    .attr('class', 'axis-label')
    .attr('y', 60)
    .attr('x', innerWidth/2)
    .attr('fill', 'black')
    .text('Population')

  // 1. CREATING THE CIRCLES FOR THE SCATTERPLOT
  // attr of 'cy' and 'cx' indiates coordinates of the circle, values of coordinates are generated by yScale and xScale functions
  // d3.scalePoint() used for xScale and yScale
  g.selectAll('circle').data(data)
    .enter().append('circle')
      .attr('cy', d => yScale(d.country))
      .attr('cx', d => xScale(d.population))
      .attr('r', 15)

  g.append('text')
    .attr('class', 'title')
    .attr('y', -10)
    .text('Top 10 Most Populous Countries')
};

d3.csv('data.csv').then(data => {

  data.forEach(d => {
    d.population = +d.population * 1000;
  });
  render(data);
});
